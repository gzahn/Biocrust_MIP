scale_fill_manual(values = pal$pal.okabe) +
theme(axis.text.x = element_text(face='bold',angle=0,size=14,hjust=.5),
axis.text.y = element_text(face='bold',size=10),
axis.title.y = element_text(face='bold',size=14),
plot.title = element_blank(),
strip.text = element_blank(),
legend.text = element_text(face='bold',size=12),
legend.title = element_text(face='bold',size=14))
ggsave("./output/figs/18S_Species_Richness_Boxplot_by_Crust_and_Invasion.png",height = 8,width = 8)
# SETUP ####
# packages
library(tidyverse)
library(phyloseq)
library(vegan)
library(lmerTest)
library(corncob)
library(patchwork)
library(broom)
# functions
source("./R/functions.R")
# variables
set.seed(666)
# theme
theme_set(theme_minimal() +
theme(strip.text = element_text(face='bold',size=14),
legend.title = element_text(face='bold',size=14),
axis.title = element_text(face='bold',size=14)
)
)
# data
ps <- readRDS("./data/physeq_18S_clean.RDS")
# "OTU Table matrix"
mat <-
ps %>%
transform_sample_counts(ra) %>%
otu_table() %>%
as('matrix')
# ORDINATIONS ####
ord <-
ps %>%
transform_sample_counts(ra) %>%
ordinate(method = "NMDS",distance = 'bray')
plot_ordination(ps,ord,color='site') +
stat_ellipse()
plot_ordination(ps,ord,color='invasion') +
stat_ellipse()
plot_ordination(ps,ord,color='crust') +
stat_ellipse()
plot_ordination(ps,ord,color='invasion') +
stat_ellipse() +
facet_wrap(~site,scales = 'free') +
theme()
data.frame(site=ps@sam_data$site,
invasion=ps@sam_data$invasion,
crust=ps@sam_data$crust,
MDS1=ord$points[,1],
MDS2=ord$points[,2]) %>%
ggplot(aes(x=MDS1,y=MDS2,color=invasion)) +
geom_point(size=3) +
stat_ellipse(linetype=2) +
facet_wrap(~site,scales = 'free') +
scale_color_manual(values = pal$pal.earthtones) +
labs(color="Invasion\nstatus")
ggsave("./output/figs/18S_NMDS_Plot_site_by_invasion.png", height = 8,width = 10)
data.frame(site=ps@sam_data$site,
invasion=ps@sam_data$invasion,
crust=ps@sam_data$crust,
plant=ps@sam_data$plant,
MDS1=ord$points[,1],
MDS2=ord$points[,2]) %>%
dplyr::filter(invasion == "Transition") %>%
ggplot(aes(x=MDS1,y=MDS2,color=plant)) +
geom_point(size=3) +
stat_ellipse(linetype=2) +
facet_wrap(~site,scales = 'free') +
scale_color_manual(values = pal$pal.okabe) +
labs(color="Plant",title = "Transition plots only")
data.frame(site=ps@sam_data$site,
invasion=ps@sam_data$invasion,
crust=ps@sam_data$crust,
MDS1=ord$points[,1],
MDS2=ord$points[,2]) %>%
ggplot(aes(x=MDS1,y=MDS2,color=invasion)) +
geom_point(size=3) +
stat_ellipse(linetype=2) +
facet_wrap(~site,scales = 'free') +
scale_color_manual(values = pal$pal.earthtones) +
labs(color="Invasion\nstatus")
data.frame(site=ps@sam_data$site,
invasion=ps@sam_data$invasion,
crust=ps@sam_data$crust,
plant=ps@sam_data$plant,
MDS1=ord$points[,1],
MDS2=ord$points[,2]) %>%
dplyr::filter(invasion == "Transition") %>%
ggplot(aes(x=MDS1,y=MDS2,color=plant)) +
geom_point(size=3) +
stat_ellipse(linetype=2) +
facet_wrap(~site,scales = 'free') +
scale_color_manual(values = pal$pal.okabe) +
labs(color="Plant",title = "Transition plots only")
ggsave("./output/figs/18S_NMDS_Plot_transitionplots_by_plant.png",height = 8, width = 10)
# PermANOVA ####
perm.mod <-
adonis2(mat ~ ps@sam_data$invasion * ps@sam_data$crust, strata = ps@sam_data$site) %>%
broom::tidy() %>%
mutate(term=term %>% str_remove_all("ps@sam_data\\$"))
perm.mod
perm.mod %>%
write_csv("./output/18S_PermANOVA_Table.csv")
# GDM Models
sample_names(ps)
## Packages
library(readxl)
library(tidyverse)
## Functions ####
source("./R/functions.R")
## Metadata ####
dat <- read_xlsx("./data/full_metadata.xlsx")
dat
## Metadata ####
dat <- read_xlsx("./data/full_metadata.xlsx")
dat
dat$sra_accession
## Variables ####
dl_path_18S <- "./data/seq/18S"
dl_path_18S
filenames_f8S <- file.path(dl_path_18S,"f")
filenames_f8S
filenames_f8S <- file.path(dl_path_18S,dat$fwd_name)
filenames_f8S
fwd_filenames_18S <- file.path(dl_path_18S,dat$fwd_name)
rev_filenames_18S <- file.path(dl_path_18S,dat$rev_name)
rev_filenames_18S
dat$rev_name
fwd_filenames_18S <- file.path(dl_path_18S,dat$fwd_name)
rev_filenames_18S <- file.path(dl_path_18S,dat$rev_name)
rev_filenames_18S
fwd_filenames_18S
dl_filenames_1 <- paste0(accessions,"_1.fastq")
accessions_18S <- dat$sra_accession
fwd_filenames_18S <- file.path(dl_path_18S,dat$fwd_name)
rev_filenames_18S <- file.path(dl_path_18S,dat$rev_name)
dl_filenames_1 <- paste0(accessions_18S,"_1.fastq")
dl_filenames_1
dl_filenames_rev <- paste0(accessions_18S,"_2.fastq")
dl_filenames_rev
fwd_filenames_18S
# packages
library(tidyverse)
library(phyloseq)
library(dada2)
library(decontam)
library(readxl)
# metadata
# sample metadata and filepaths
metadata <- read_xlsx("./data/full_metadata.xlsx")
metadata
# metadata
# sample metadata and filepaths
metadata$fwd_name
metadata$rev_name
janitor::clean_names() %>%
dplyr::filter(sample != "Rhizosphere") %>%  # leave out rhizosphere data from this analysis
mutate(fwd_18s_filepath = file.path("./data/seq/18S",fwd_name), # add paths to file names
rev_18s_filepath = file.path("./data/seq/18S",rev_name))
# metadata
# sample metadata and filepaths
metadata <-
read_xlsx("./data/full_metadata.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(sample != "Rhizosphere") %>%  # leave out rhizosphere data from this analysis
mutate(fwd_18s_filepath = file.path("./data/seq/18S",fwd_name), # add paths to file names
rev_18s_filepath = file.path("./data/seq/18S",rev_name))
# metadata
# sample metadata and filepaths
metadata <-
read_xlsx("./data/full_metadata.xlsx") %>%
janitor::clean_names() %>%
mutate(fwd_18s_filepath = file.path("./data/seq/18S",fwd_name), # add paths to file names
rev_18s_filepath = file.path("./data/seq/18S",rev_name))
metadata
metadata$fwd_18s_filepath
# add more metadata
metadata$amplicon <- "SSU"
metadata$run <- 1
# add cutadapt file paths
cutadapt_dir <- list.dirs(full.names = TRUE)[grep("cutadapt$",list.dirs(full.names = TRUE))]
filtN_dir <- list.dirs(full.names = TRUE)[grep("filtN$",list.dirs(full.names = TRUE))]
metadata$cutadapt_fwd_paths <- paste0(cutadapt_dir,"/",metadata$sample_id,"_cutadapt_fwd.fastq.gz")
metadata$cutadapt_rev_paths <- paste0(cutadapt_dir,"/",metadata$sample_id,"_cutadapt_rev.fastq.gz")
names(metadata)
# SETUP ####
# packages
library(tidyverse)
library(phyloseq)
library(dada2)
library(decontam)
library(readxl)
# functions
source("./R/functions.R")
# metadata
# sample metadata and filepaths
metadata <-
read_xlsx("./data/full_metadata.xlsx") %>%
janitor::clean_names() %>%
mutate(fwd_18s_filepath = file.path("./data/seq/18S",fwd_name), # add paths to file names
rev_18s_filepath = file.path("./data/seq/18S",rev_name))
names(metadata)
# add more metadata
metadata$amplicon <- "SSU"
metadata$run <- 1
# add cutadapt file paths
cutadapt_dir <- list.dirs(full.names = TRUE)[grep("cutadapt$",list.dirs(full.names = TRUE))]
filtN_dir <- list.dirs(full.names = TRUE)[grep("filtN$",list.dirs(full.names = TRUE))]
metadata$cutadapt_fwd_paths <- paste0(cutadapt_dir,"/",metadata$sample_id,"_cutadapt_fwd.fastq.gz")
metadata$cutadapt_rev_paths <- paste0(cutadapt_dir,"/",metadata$sample_id,"_cutadapt_rev.fastq.gz")
metadata$cutadapt_rev_paths
# subset metadata to samples clearly present in cutadapt
metadata <- metadata[file.exists(metadata$cutadapt_fwd_paths),]
metadata
metadata$control[grep("BLANK|NEG",metadata$sample_id)]
# add control column
metadata$control <- FALSE
metadata$control[grep("BLANK|NEG",metadata$sample_id)]
metadata$control[grep("BLANK|NEG",metadata$sample_id)] <- TRUE
# reload point
seqtab.nochim <- readRDS("./data/ASV_Tables/SSU_ASV_Table.RDS")
# set output file path
outfile <- "./data/ASV_Tables/SSU_Taxonomy_Table.RDS"
tax <- readRDS(outfile)
# packages
library(tidyverse)
library(phyloseq)
library(dada2)
library(decontam)
library(readxl)
# functions
source("./R/functions.R")
# metadata
meta <- sample_data(metadata)
sample_names(meta) <- meta$sample_id
meta[grep("^NEG|^BLANK",sample_names(meta),invert = TRUE),]
# remove neg controls
meta <- meta[grep("^NEG|^BLANK",sample_names(meta),invert = TRUE),]
# tax table
taxa <- tax_table(tax)
# asv table
asv <- otu_table(seqtab.nochim,taxa_are_rows = FALSE)
sample_names(asv)
if(identical(sample_names(asv),sample_names(meta))){
ps <- phyloseq(meta,taxa,asv)
} else (cat("Check sample names match"))
sample_names(meta)
sample_names(meta);sample_names(asv)
colnames(seqtab.nochim)
row.names(seqtab.nochim)
row.names(seqtab.nochim)
metadata$sample_id
row.names(seqtab.nochim)
tax <- readRDS(outfile)
# reload point
seqtab.nochim <- readRDS("./data/ASV_Tables/SSU_ASV_Table.RDS")
# packages
library(tidyverse)
library(phyloseq)
library(dada2)
library(decontam)
library(readxl)
# functions
source("./R/functions.R")
# metadata
# sample metadata and filepaths
metadata <-
read_xlsx("./data/full_metadata.xlsx") %>%
janitor::clean_names() %>%
mutate(fwd_18s_filepath = file.path("./data/seq/18S",fwd_name), # add paths to file names
rev_18s_filepath = file.path("./data/seq/18S",rev_name))
names(metadata)
# add more metadata
metadata$amplicon <- "SSU"
metadata$run <- 1
# add cutadapt file paths
cutadapt_dir <- list.dirs(full.names = TRUE)[grep("cutadapt$",list.dirs(full.names = TRUE))]
filtN_dir <- list.dirs(full.names = TRUE)[grep("filtN$",list.dirs(full.names = TRUE))]
metadata$cutadapt_fwd_paths <- paste0(cutadapt_dir,"/",metadata$sample_id,"_cutadapt_fwd.fastq.gz")
metadata$cutadapt_rev_paths <- paste0(cutadapt_dir,"/",metadata$sample_id,"_cutadapt_rev.fastq.gz")
# add control column
metadata$control <- FALSE
metadata$control[grep("BLANK|NEG",metadata$sample_id)] <- TRUE
# remove neg controls
meta <- meta[grep("^NEG|^BLANK",sample_names(meta),invert = TRUE),]
meta$sample_id
row.names(seqtab.nochim)
# reorder seqtab to match metadata
seqtab.nochim[meta$sample_id,]
# reorder seqtab to match metadata
seqtab.nochim[meta$sample_id,] %>% row.names()
meta$sample_id
# reorder seqtab to match metadata
seqtab.nochim <- seqtab.nochim[meta$sample_id,] %>% row.names()
# asv table
asv <- otu_table(seqtab.nochim,taxa_are_rows = FALSE)
# reload point
seqtab.nochim <- readRDS("./data/ASV_Tables/SSU_ASV_Table.RDS")
tax <- readRDS(outfile)
# metadata
meta <- sample_data(metadata)
sample_names(meta) <- meta$sample_id
# remove neg controls
meta <- meta[grep("^NEG|^BLANK",sample_names(meta),invert = TRUE),]
# tax table
taxa <- tax_table(tax)
# reorder seqtab to match metadata
seqtab.nochim <- seqtab.nochim[meta$sample_id,]
# asv table
asv <- otu_table(seqtab.nochim,taxa_are_rows = FALSE)
sample_names(asv)
sample_names(meta);sample_names(asv)
if(identical(sample_names(asv),sample_names(meta))){
ps <- phyloseq(meta,taxa,asv)
} else (cat("Check sample names match"))
ps
saveRDS(ps,"./data/physeq_18S_not_cleaned.RDS")
# packages
library(tidyverse)
library(phyloseq)
# functions
source("./R/functions.R")
# data
ps <- readRDS("./data/physeq_18S_not_cleaned.RDS")
# REMOVE NON-AMF
ps <-
ps %>%
subset_taxa(Phylum == "p__Glomeromycota")
# add pos control designations based on 'note' column
ps@sam_data$control <- !is.na(ps@sam_data$note)
ps@sam_data$note
ps@sam_data$control
ps@sam_data %>% View
library(phyloseq)
library(dada2)
library(decontam)
library(readxl)
# functions
source("./R/functions.R")
# metadata
# sample metadata and filepaths
metadata <-
read_xlsx("./data/full_metadata.xlsx") %>%
janitor::clean_names() %>%
mutate(fwd_18s_filepath = file.path("./data/seq/18S",fwd_name), # add paths to file names
rev_18s_filepath = file.path("./data/seq/18S",rev_name))
names(metadata)
# add more metadata
metadata$amplicon <- "SSU"
metadata$run <- 1
metadata
View(metadata)
# add cutadapt file paths
cutadapt_dir <- list.dirs(full.names = TRUE)[grep("cutadapt$",list.dirs(full.names = TRUE))]
filtN_dir <- list.dirs(full.names = TRUE)[grep("filtN$",list.dirs(full.names = TRUE))]
metadata$cutadapt_fwd_paths <- paste0(cutadapt_dir,"/",metadata$sample_id,"_cutadapt_fwd.fastq.gz")
metadata$cutadapt_rev_paths <- paste0(cutadapt_dir,"/",metadata$sample_id,"_cutadapt_rev.fastq.gz")
# add control column
metadata$control <- FALSE
metadata$control[grep("BLANK|NEG",metadata$sample_id)] <- TRUE
# reload point
seqtab.nochim <- readRDS("./data/ASV_Tables/SSU_ASV_Table.RDS")
# load path to database
SSU_DB <- "./taxonomy/Eukaryome_General_SSU_v1.8_reformatted_VTX.fasta.gz"
# set output file path
outfile <- "./data/ASV_Tables/SSU_Taxonomy_Table.RDS"
tax <- readRDS(outfile)
# metadata
meta <- sample_data(metadata)
meta$sample_id
sample_names(meta)
sample_names(meta) <- meta$sample_id
# remove neg controls
meta <- meta[grep("^NEG|^BLANK",sample_names(meta),invert = TRUE),]
# tax table
taxa <- tax_table(tax)
# reorder seqtab to match metadata
seqtab.nochim <- seqtab.nochim[meta$sample_id,]
# reload point
seqtab.nochim <- readRDS("./data/ASV_Tables/SSU_ASV_Table.RDS")
# reorder seqtab to match metadata
seqtab.nochim <- seqtab.nochim[meta$sample_id,]
# asv table
asv <- otu_table(seqtab.nochim,taxa_are_rows = FALSE)
sample_names(asv)
sample_names(meta);sample_names(asv)
identical(sample_names(meta),sample_names(asv))
if(identical(sample_names(asv),sample_names(meta))){
ps <- phyloseq(meta,taxa,asv)
} else (cat("Check sample names match"))
ps@sam_data %>% View
meta$fe
View(meta)
ps@sam_data$fe
saveRDS(ps,"./data/physeq_18S_not_cleaned.RDS")
# SETUP ####
# packages
library(tidyverse)
library(phyloseq)
# functions
source("./R/functions.R")
# data
ps <- readRDS("./data/physeq_18S_not_cleaned.RDS")
# REMOVE NON-AMF
ps <-
ps %>%
subset_taxa(Phylum == "p__Glomeromycota")
ps@sam_data$fe
# identify pos controls
ps@sam_data$sample_id
# identify pos controls
grepl(pattern="Mycobloom|^NC",ps@sam_data$sample_id)
# identify pos controls
ps@sam_data$pos_ctl <- grepl(pattern="Mycobloom|^NC",ps@sam_data$sample_id)
pos <-
ps %>%
transform_sample_counts(ra) %>%
subset_samples(pos_ctl)
keepers <- taxa_sums(pos) > 0
names(keepers) <- NULL
pos %>%
subset_taxa(keepers) %>%
plot_bar2(fill = "Genus")
ggsave("./output/figs/18S_positive_control_barchart.png")
ps %>%
subset_samples(pos_ctl == FALSE)
ps
# remove positive controls
ps <-
ps %>%
subset_samples(pos_ctl == FALSE)
# remove empty taxa
ps <-
ps %>%
subset_taxa(taxa_sums(ps) > 0)
# check sample sums
all(ps %>% sample_sums() > 0)
# clean taxa ranks
ps <- clean_ps_taxonomy(ps)
# remove useless columns
ps@sam_data$note <- NULL
ps@sam_data$run <- NULL
ps@sam_data$control <- NULL
ps@sam_data[,grep("path",ps@sam_data %>% names,invert = TRUE)]
grep("path",ps@sam_data %>% names,invert = TRUE)
ps@sam_data %>% names
# convert factors
ps@sam_data$invasion <- factor(ps@sam_data$invasion,levels=c("Native","Transition","Invaded"))
# build better species-level names
ps <-
ps %>%
make_sane_taxa_names()
# add plant data
V <- ps@sam_data$sample_id %>% grepl(pattern="V$")
P <- ps@sam_data$sample_id %>% grepl(pattern="P$")
ps@sam_data <-
ps@sam_data %>%
as('data.frame') %>%
mutate(plant=case_when(V ~ "V",
P ~ "P")) %>%
sample_data()
# class conversions
apply(as(ps@sam_data,'data.frame'),2,class)
ps@sam_data$hyp
ps@sam_data$dse
ps@sam_data$nh4
ps@sam_data$om
ps@sam_data$ph
ps@sam_data$ca
ps@sam_data$mg
names(ps@sam_data)
names(ps@sam_data)[89-92]
names(ps@sam_data)[89:92]
names(ps@sam_data)[21:92]
# class conversions
apply(as(ps@sam_data,'data.frame'),2,class)
ps@sam_data %>% names
names(ps@sam_data)[c(12,13,21:92)]
num_cols <- names(ps@sam_data)[c(12,13,21:92)]
meta
meta  <- ps@sam_data %>% as('data.frame')
num_cols
meta %>%
mutate(across(all_of(num_cols),as.numeric))
meta %>%
mutate(across(all_of(num_cols),as.numeric)) %>% head
meta %>%
mutate(across(all_of(num_cols),as.numeric)) %>% apply(2,class)
meta %>%
mutate(across(all_of(num_cols)),as.numeric) %>% apply(2,class)
meta %>%
mutate(across(all_of(num_cols),as.numeric)) %>% glimpse
meta %>%
mutate(across(all_of(num_cols),as.numeric)) %>%
sample_data()
sam_dat <-
meta %>%
mutate(across(all_of(num_cols),as.numeric)) %>%
sample_data()
sample_names(sam_dat)
ps@sam_data <- sam_dat
ps
ps@sam_data$hyp
# SAVE CLEAN PHYSEQ ####
saveRDS(ps,"./data/physeq_18S_clean.RDS")
