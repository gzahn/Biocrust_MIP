library(readxl)
library(tidyverse)
read_xlsx("./data/MIP_Data.xlsx",sheet = 5)
read_xlsx("./data/MIP_Data.xlsx",sheet = "Colonization")
read_xlsx("./data/MIP_Data.xlsx",sheet = "Colonization") %>% names
dat <- read_xlsx("./data/MIP_Data.xlsx",sheet = "Colonization") %>% names
dat <- read_xlsx("./data/MIP_Data.xlsx",sheet = "Colonization")
source("./R/functions.R")
dat <- read_xlsx("./data/MIP_Data.xlsx",sheet = "Colonization")
dl_path_18S <- "./data/seq/18S"
accessions_18S <- dat$SRA_Accession_18S
## Metadata ####
dat <- read_xlsx("./data/MIP_Data.xlsx",sheet = "Colonization")
dat
meta <- read_xlsx("./data/Sequencing_Palouse2021_metadata.xlsx")
meta
meta <- read_xlsx("./data/Sequencing_Palouse2021_metadata.xlsx",sheet = 2)
meta
meta <- read_xlsx("./data/Sequencing_Palouse2021_metadata.xlsx",sheet = 3)
meta
meta <- read_xlsx("./data/Sequencing_Palouse2021_metadata.xlsx",sheet = 4)
meta
meta <- read_xlsx("./data/Sequencing_Palouse2021_metadata.xlsx")
meta
meta$`Sample ID`
library(tidyverse)
library(phyloseq)
library(dada2)
library(decontam)
library(readxl)
# functions
source("./R/functions.R")
# sample metadata and filepaths
metadata <- read_xlsx("./data/Palouse2021_18S_sequencing_metadata.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(sample != "Rhizosphere") %>%  # leave out rhizosphere data from this analysis
mutate(fwd_18s_filepath = file.path("./data/seq/18S",fwd_18s_filepath), # add paths to file names
rev_18s_filepath = file.path("./data/seq/18S",rev_18s_filepath)) %>%
dplyr::rename("crust" = "sample", # change column names to be more intuitive
"invasion" = "treatment")
# add more metadata
metadata$amplicon <- "SSU"
metadata$run <- 1
# add cutadapt file paths
cutadapt_dir <- list.dirs(full.names = TRUE)[grep("cutadapt$",list.dirs(full.names = TRUE))]
filtN_dir <- list.dirs(full.names = TRUE)[grep("filtN$",list.dirs(full.names = TRUE))]
metadata$cutadapt_fwd_paths <- paste0(cutadapt_dir,"/",metadata$sample_id,"_cutadapt_fwd.fastq.gz")
metadata$cutadapt_rev_paths <- paste0(cutadapt_dir,"/",metadata$sample_id,"_cutadapt_rev.fastq.gz")
# subset metadata to samples clearly present in cutadapt
metadata <- metadata[file.exists(metadata$cutadapt_fwd_paths),]
# add control column
metadata$control <- FALSE
metadata$control[grep("BLANK|NEG",metadata$sample_id)] <- TRUE
# reload point
seqtab.nochim <- readRDS("./data/ASV_Tables/SSU_ASV_Table.RDS")
# load path to database
SSU_DB <- "./taxonomy/Eukaryome_General_SSU_v1.8_reformatted_VTX.fasta.gz"
# set output file path
outfile <- "./data/ASV_Tables/SSU_Taxonomy_Table.RDS"
# assign taxonomy
tax <- assign_taxonomy_to_asv_table(asv.table=seqtab.nochim,
tax.database=SSU_DB,
multithread=(parallel::detectCores()-2),
random.seed=666,
try.rc = TRUE,
min.boot=50)
# export as RDS
saveRDS(tax,outfile)
met <- sample_data(metadata)
met
sample_names(met)
met$sample_id
View(metadata)
sample_names(met) <- met$sample_id
# metadata
meta <- sample_data(metadata)
sample_names(meta) <- meta$sample_id
# tax table
taxa <- tax_table(tax)
# asv table
asv <- otu_table(seqtab.nochim)
colnames(seqtab.nochim)
# asv table
asv <- otu_table(seqtab.nochim,taxa_are_rows = FALSE)
sample_names(asv)
sample_names(meta)
# remove neg controls
grep("^NEG|^BLANK",sample_names(meta))
# remove neg controls
grep("^NEG|^BLANK",sample_names(meta),invert = TRUE)
meta
meta[1,1]
meta[grep("^NEG|^BLANK",sample_names(meta),invert = TRUE),]
meta[grep("^NEG|^BLANK",sample_names(meta),invert = TRUE),] %>% dim
sample_names(asv)
meta <- meta[grep("^NEG|^BLANK",sample_names(meta),invert = TRUE),] %>% dim
sample_names(meta)
meta$sample_id
# metadata
meta <- sample_data(metadata)
# remove neg controls
meta <- meta[grep("^NEG|^BLANK",sample_names(meta),invert = TRUE),]
sample_names(meta) <- meta$sample_id
meta
sample_names(meta)
sample_names(asv)
# metadata
meta <- sample_data(metadata)
sample_names(meta) <- meta$sample_id
sample_names(meta)
# remove neg controls
meta <- meta[grep("^NEG|^BLANK",sample_names(meta),invert = TRUE),]
sample_names(meta)
sample_names(asv)
identical(sample_names(asv),sample_names(meta))
if(identical(sample_names(asv),sample_names(meta))){
ps <- phyloseq(meta,taxa,asv)
} else (cat("Check sample names match"))
ps
saveRDS(ps,"./data/physeq_18S_not_cleaned.RDS")
# packages
library(tidyverse)
library(phyloseq)
# functions
source("./R/functions.R")
# data
ps <- readRDS("./data/physeq_18S_not_cleaned.RDS")
# CHECK POS CONTROLS ####
ps@sam_data$control
# CHECK POS CONTROLS ####
ps@sam_data
# CHECK POS CONTROLS ####
ps@sam_data %>% View
!is.na(ps@sam_data$note)
ps@sam_data$control
# add pos control designations based on 'note' column
ps@sam_data$control <- !is.na(ps@sam_data$note)
ps@sam_data$control
ra
ps %>%
transform_sample_counts(ra) %>%
subset_samples(control)
ps %>%
transform_sample_counts(ra) %>%
subset_samples(control) %>%
plot_bar2(fill = "Genus")
pos <-
ps %>%
transform_sample_counts(ra) %>%
subset_samples(control)
pos %>%
subset_taxa(taxa_sums(pos) > 0) %>%
plot_bar2(fill = "Species")
pos
taxa_sums(pos)
taxa_sums(pos) > 0
pos %>%
subset_taxa(taxa_sums(pos) > 0)
keepers <- taxa_sums(pos) > 0
keepers
names(keepers)
names(keepers) <- NULL
keepers
pos %>%
subset_taxa(keepers)
pos %>%
subset_taxa(keepers) %>%
plot_bar2(fill = "Species")
plot_bar2(fill = "Genus
pos %>%
subset_taxa(keepers) %>%
plot_bar2(fill = "Genus")
pos %>%
subset_taxa(keepers) %>%
plot_bar2(fill = "Genus")
pos@sam_data$note
pos@tax_table[,5]
pos@tax_table[,5] %>% unique
pos@tax_table[,5] %>% unique %>% unname
pos@tax_table[,4] %>% unique %>% unname
pos@tax_table[,3] %>% unique %>% unname
pos@tax_table[,2] %>% unique %>% unname
# REMOVE NON-AMF
ps %>%
plot_bar(fill="Phylum")
# REMOVE NON-AMF
ps %>%
subset_taxa(Phylum == "p__Glomeromycota")
# REMOVE NON-AMF
ps <-
ps %>%
subset_taxa(Phylum == "p__Glomeromycota")
ps@sam_data$control
# add pos control designations based on 'note' column
ps@sam_data$control <- !is.na(ps@sam_data$note)
pos <-
ps %>%
transform_sample_counts(ra) %>%
subset_samples(control)
keepers <- taxa_sums(pos) > 0
names(keepers) <- NULL
pos %>%
subset_taxa(keepers) %>%
plot_bar2(fill = "Genus")
pos@sam_data$note
pos@tax_table[,6]
ps@tax_table[,6] %>% unique
ps@tax_table[,6] %>% is.na()
sum(ps@tax_table[,6] %>% is.na())
which(ps@tax_table[,6] %>% is.na())
# find taxa with no genus assigned
ps@tax_table[which(ps@tax_table[,6] %>% is.na()),] %>% View
# find taxa with no genus assigned
ps@tax_table[which(ps@tax_table[,6] %>% is.na()),]
# add pos control designations based on 'note' column
ps@sam_data$control <- !is.na(ps@sam_data$note)
pos <-
ps %>%
transform_sample_counts(ra) %>%
subset_samples(control)
keepers <- taxa_sums(pos) > 0
names(keepers) <- NULL
pos %>%
subset_taxa(keepers) %>%
plot_bar2(fill = "Genus")
pos@sam_data$note
pos@tax_table[,2] %>% unique %>% unname
mkdir("./output/figs")
dir.create("./output/figs")
ggsave("./output/figs/positive_control_barchart.png")
ps@sam_data$control
# remove positive controls
ps %>%
subset_samples(control == FALSE)
ps
# remove positive controls
ps <-
ps %>%
subset_samples(control == FALSE)
# remove empty taxa
ps %>%
subset_taxa(taxa_sums(ps) > 0)
# remove empty taxa
ps <-
ps %>%
subset_taxa(taxa_sums(ps) > 0)
# check sample sums
ps %>%
sample_sums()
# check sample sums
ps %>%
sample_sums() > 0
# check sample sums
ps %>%
sample_sums() > 0 %>% all()
# check sample sums
all(ps %>%
sample_sums() > 0)
# clean taxa ranks
ps@tax_table[,1]
clean_ps_taxonomy(ps)
test <- clean_ps_taxonomy(ps)
test@tax_table[,1]
test@tax_table[,2]
test@tax_table[,3]
test@tax_table[,4]
test@tax_table[,7]
test@tax_table[,6]
# clean taxa ranks
ps <- clean_ps_taxonomy(ps)
ps@sam_data %>% head
ps@sam_data$plot
# remove useless columns
ps@sam_data$note
# remove useless columns
ps@sam_data$note <- NULL
ps
# remove useless columns
ps@sam_data$run <- NULL
ps@sam_data$run <- NULL
ps@sam_data %>% head
ps@sam_data %>% names
grep("path",ps@sam_data %>% names)
grep("path",ps@sam_data %>% names,invert = TRUE)
ps@sam_data[,grep("path",ps@sam_data %>% names,invert = TRUE)]
ps@sam_data <- ps@sam_data[,grep("path",ps@sam_data %>% names,invert = TRUE)]
ps
ps@sam_data
ps@sam_data$control <- NULL
ps@sam_data
taxa_sums(ps) %>% summary
sample_sums(ps) %>% summary
# add refseq slot
ps@refseq
# add refseq slot
ps@refseq <- Biostrings::DNAStringSet(taxa_names(ps))
ps@refseq
# SAVE CLEAN PHYSEQ ####
saveRDS(ps,"./data/physeq_18S_clean.RDS")
